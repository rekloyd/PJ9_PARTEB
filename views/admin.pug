doctype html
html(lang="es")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Administración de Usuarios
    script(src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js")
    style.
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
        color: #333;
      }
      .container {
        max-width: 1200px;
        margin: 20px auto;
        padding: 30px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      .back-to-home {
        background-color: #4caf50;
        color: white;
        border: none;
        padding: 12px 18px;
        font-size: 18px;
        cursor: pointer;
        border-radius: 5px;
        position: absolute;
        top: 10px;
        left: 10px;
        transition: background-color 0.3s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      .back-to-home:hover {
        background-color: #45a049;
      }
      .form-group {
        margin-bottom: 20px;
      }
      .form-group label {
        font-weight: bold;
        margin-bottom: 8px;
        display: block;
      }
      .form-group input {
        width: 100%;
        padding: 12px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-sizing: border-box;
        transition: border-color 0.3s ease;
      }
      .form-group input:focus {
        border-color: #4caf50;
        outline: none;
      }
      .btn-primary {
        background-color: #4caf50;
        color: white;
        border: none;
        padding: 12px 18px;
        font-size: 16px;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }
      .btn-primary:hover {
        background-color: #45a049;
      }
      .admin-section {
        margin-bottom: 40px;
      }
      .user-list-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
        font-weight: bold;
        color: #4caf50;
      }
      .user-list-header span {
        width: 48%;
        text-align: center;
      }
      ul.user-list {
        list-style-type: none;
        padding: 0;
      }
      ul.user-list li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px;
        border-bottom: 1px solid #ddd;
        font-size: 16px;
        background-color: #f9f9f9;
        border-radius: 5px;
        margin-bottom: 10px;
      }
      ul.user-list li button {
        background-color: #ff4d4d;
        color: white;
        border: none;
        padding: 6px 12px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s ease;
      }
      ul.user-list li button:hover {
        background-color: #e60000;
      }
      h1, h2 {
        font-size: 28px;
        color: #333;
        text-align: center;
        margin-bottom: 20px;
      }

  body
    #app
      button#back-to-home.back-to-home(@click="goBack") ⬅️ Volver a Inicio

      .container
        h1 Administración de Usuarios

        .admin-section
          h2 Crear Nuevo Usuario
          form(@submit.prevent="createUser")
            .form-group
              label(for="username") Nombre de usuario:
              input#username(type="text", v-model="newUser.username", name="username", required)
            .form-group
              label(for="password") Contraseña:
              input#password(type="password", v-model="newUser.password", name="password", required)
            button.btn-primary(type="submit") Crear Usuario

        .admin-section
          h2 Usuarios Registrados
          .user-list-header
            span Nombre de usuario
            span Acciones
          ul#userList.user-list
            li(v-for="user in users", :key="user._id")
              strong {{ user.username }}
              div
                button(@click="updateUser(user._id)") Actualizar
                button(@click="deleteUser(user._id)") Eliminar

    script.
      new Vue({
        el: "#app",
        data: {
          users: [],
          newUser: {
            username: "",
            password: ""
          }
        },
        mounted() {
          this.loadUsers();
        },
        methods: {
          goBack() {
            window.location.href = "/inicio";
            alert("Volviendo al inicio");
          },
          async loadUsers() {
            try {
              const response = await fetch("/api/users");
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              const users = await response.json();
              this.users = users;
            } catch (error) {
              console.error("Error cargando usuarios:", error);
              alert("Error al cargar usuarios");
            }
          },
          async createUser() {
            try {
              const response = await fetch("/api/users", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json"
                },
                body: JSON.stringify(this.newUser)
              });

              if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || "Error al crear usuario");
              }

              this.newUser.username = "";
              this.newUser.password = "";
              this.loadUsers();
              alert("Usuario creado exitosamente");
            } catch (error) {
              console.error("Error creando usuario:", error);
              alert(error.message);
            }
          },
          async updateUser(userId) {
            const newUsername = prompt("Introduce el nuevo nombre de usuario:");
            if (newUsername) {
              try {
                const response = await fetch(`/api/users/${userId}`, {
                  method: "PUT",
                  headers: {
                    "Content-Type": "application/json"
                  },
                  body: JSON.stringify({ username: newUsername })
                });

                if (!response.ok) {
                  const errorData = await response.json();
                  throw new Error(errorData.message || "Error al actualizar usuario");
                }

                this.loadUsers();
                alert("Usuario actualizado exitosamente");
              } catch (error) {
                console.error("Error actualizando usuario:", error);
                alert(error.message);
              }
            }
          },
          async deleteUser(userId) {
            if (confirm("¿Estás seguro de eliminar este usuario?")) {
              try {
                const response = await fetch(`/api/users/${userId}`, {
                  method: "DELETE"
                });

                if (!response.ok) {
                  throw new Error(`HTTP error! status: ${response.status}`);
                }

                this.loadUsers();
                alert("Usuario eliminado exitosamente");
              } catch (error) {
                console.error("Error eliminando usuario:", error);
                alert("Error al eliminar usuario");
              }
            }
          }
        }
      });
